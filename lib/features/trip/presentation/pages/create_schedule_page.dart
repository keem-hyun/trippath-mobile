import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import '../../../../core/design_system/design_system.dart';
import '../../domain/models/schedule.dart';
import '../providers/schedule_view_model.dart';

class CreateSchedulePage extends ConsumerStatefulWidget {
  final String tripId;
  final DateTime selectedDate;

  const CreateSchedulePage({
    super.key,
    required this.tripId,
    required this.selectedDate,
  });

  @override
  ConsumerState<CreateSchedulePage> createState() => _CreateSchedulePageState();
}

class _CreateSchedulePageState extends ConsumerState<CreateSchedulePage> {
  final _titleController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _titleFocusNode = FocusNode();
  final _descriptionFocusNode = FocusNode();
  
  TimeOfDay _selectedTime = TimeOfDay.now();
  List<String> _locations = [];
  double? _cost;

  @override
  void dispose() {
    _titleController.dispose();
    _descriptionController.dispose();
    _titleFocusNode.dispose();
    _descriptionFocusNode.dispose();
    super.dispose();
  }

  String get _formattedDate {
    final month = widget.selectedDate.month;
    final day = widget.selectedDate.day;
    return '$month월 ${day}일 ${_getDayOfWeek(widget.selectedDate.weekday)}';
  }

  String _getDayOfWeek(int weekday) {
    switch (weekday) {
      case DateTime.monday:
        return '월요일';
      case DateTime.tuesday:
        return '화요일';
      case DateTime.wednesday:
        return '수요일';
      case DateTime.thursday:
        return '목요일';
      case DateTime.friday:
        return '금요일';
      case DateTime.saturday:
        return '토요일';
      case DateTime.sunday:
        return '일요일';
      default:
        return '';
    }
  }

  String _formatTime(TimeOfDay time) {
    final hour = time.hour.toString().padLeft(2, '0');
    final minute = time.minute.toString().padLeft(2, '0');
    return '$hour:$minute';
  }

  Future<void> _selectTime() async {
    final TimeOfDay? time = await showTimePicker(
      context: context,
      initialTime: _selectedTime,
    );
    if (time != null) {
      setState(() {
        _selectedTime = time;
      });
    }
  }

  void _addLocation() {
    // TODO: Implement location picker
    // For now, add a placeholder location
    setState(() {
      _locations.add('새로운 장소');
    });
  }

  void _removeLocation(int index) {
    setState(() {
      _locations.removeAt(index);
    });
  }

  bool get _canSubmit {
    return _titleController.text.trim().isNotEmpty;
  }

  Future<void> _submitSchedule() async {
    if (!_canSubmit) return;

    final schedule = Schedule(
      id: '', // Will be generated by the data source
      tripId: widget.tripId,
      title: _titleController.text.trim(),
      date: widget.selectedDate,
      time: _formatTime(_selectedTime),
      locations: _locations,
      description: _descriptionController.text.trim().isEmpty 
          ? null 
          : _descriptionController.text.trim(),
      cost: _cost,
      createdAt: DateTime.now(),
      updatedAt: null,
    );

    try {
      await ref.read(scheduleViewModelProvider.notifier).createSchedule(schedule);
      if (mounted) {
        Navigator.of(context).pop(true); // Return true to indicate success
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(
            content: Text('일정 추가에 실패했습니다: $e'),
            backgroundColor: AppColors.error,
          ),
        );
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final scheduleState = ref.watch(scheduleViewModelProvider);
    
    return Scaffold(
      appBar: AppBar(
        title: Text(
          '일정 추가',
          style: AppTypography.labelL,
        ),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back_ios),
          onPressed: () => Navigator.of(context).pop(),
        ),
      ),
      body: Column(
        children: [
          Expanded(
            child: SingleChildScrollView(
              padding: const EdgeInsets.all(16),
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  // Date selector
                  Container(
                    width: double.infinity,
                    padding: const EdgeInsets.symmetric(vertical: 12, horizontal: 16),
                    decoration: BoxDecoration(
                      border: Border.all(color: AppColors.gray300),
                      borderRadius: BorderRadius.circular(8),
                    ),
                    child: Row(
                      children: [
                        Text(
                          _formattedDate,
                          style: AppTypography.paragraphM,
                        ),
                        const Spacer(),
                        const Icon(Icons.keyboard_arrow_down, color: AppColors.textSecondary),
                      ],
                    ),
                  ),
                  const SizedBox(height: 24),

                  // Title input
                  Text(
                    '제목',
                    style: AppTypography.labelM.copyWith(
                      fontWeight: AppTypography.medium,
                    ),
                  ),
                  const SizedBox(height: 8),
                  TextField(
                    controller: _titleController,
                    focusNode: _titleFocusNode,
                    decoration: InputDecoration(
                      hintText: '장소명*',
                      counterText: '${_titleController.text.length} / 80',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide(color: AppColors.gray300),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide(color: AppColors.gray300),
                      ),
                    ),
                    maxLength: 80,
                    onChanged: (value) {
                      setState(() {}); // Rebuild to update counter and button state
                    },
                  ),
                  const SizedBox(height: 24),

                  // Description input
                  Text(
                    '설명',
                    style: AppTypography.labelM.copyWith(
                      fontWeight: AppTypography.medium,
                    ),
                  ),
                  const SizedBox(height: 8),
                  TextField(
                    controller: _descriptionController,
                    focusNode: _descriptionFocusNode,
                    decoration: InputDecoration(
                      hintText: '여행 일정에 대한 설명입니다.',
                      counterText: '${_descriptionController.text.length} / 1000',
                      border: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide(color: AppColors.gray300),
                      ),
                      enabledBorder: OutlineInputBorder(
                        borderRadius: BorderRadius.circular(8),
                        borderSide: BorderSide(color: AppColors.gray300),
                      ),
                    ),
                    maxLength: 1000,
                    maxLines: 5,
                    onChanged: (value) {
                      setState(() {}); // Rebuild to update counter
                    },
                  ),
                  const SizedBox(height: 24),

                  // Time setting
                  _buildOptionTile(
                    icon: Icons.access_time,
                    title: '시간 설정',
                    onTap: _selectTime,
                  ),
                  const SizedBox(height: 16),

                  // Location setting
                  _buildOptionTile(
                    icon: Icons.location_on,
                    title: '장소 추가',
                    subtitle: _locations.isEmpty ? null : '장소 선택 최대 3개 가능',
                    onTap: _addLocation,
                  ),
                  
                  // Location list
                  if (_locations.isNotEmpty) ...[
                    const SizedBox(height: 8),
                    ...List.generate(_locations.length, (index) {
                      return Padding(
                        padding: const EdgeInsets.only(bottom: 8),
                        child: Container(
                          padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
                          decoration: BoxDecoration(
                            color: AppColors.gray100,
                            borderRadius: BorderRadius.circular(8),
                          ),
                          child: Row(
                            children: [
                              Expanded(
                                child: Text(
                                  _locations[index],
                                  style: AppTypography.paragraphM,
                                ),
                              ),
                              GestureDetector(
                                onTap: () => _removeLocation(index),
                                child: const Icon(Icons.close, size: 20, color: AppColors.textSecondary),
                              ),
                            ],
                          ),
                        ),
                      );
                    }),
                  ],
                  
                  const SizedBox(height: 16),

                  // Budget setting
                  _buildOptionTile(
                    icon: Icons.receipt_long,
                    title: '비용 추가',
                    onTap: () {
                      // TODO: Implement cost input dialog
                    },
                  ),
                ],
              ),
            ),
          ),
          
          // Submit button
          Container(
            padding: const EdgeInsets.all(16),
            child: SizedBox(
              width: double.infinity,
              child: ElevatedButton(
                onPressed: scheduleState.isLoading ? null : (_canSubmit ? _submitSchedule : null),
                style: ElevatedButton.styleFrom(
                  backgroundColor: _canSubmit ? AppColors.primary : AppColors.gray300,
                  foregroundColor: _canSubmit ? AppColors.white : AppColors.textTertiary,
                  padding: const EdgeInsets.symmetric(vertical: 16),
                  shape: RoundedRectangleBorder(
                    borderRadius: BorderRadius.circular(8),
                  ),
                ),
                child: scheduleState.isLoading
                    ? const SizedBox(
                        height: 20,
                        width: 20,
                        child: CircularProgressIndicator(
                          strokeWidth: 2,
                          valueColor: AlwaysStoppedAnimation<Color>(AppColors.white),
                        ),
                      )
                    : Text(
                        '저장',
                        style: AppTypography.labelL.copyWith(
                          color: _canSubmit ? AppColors.white : AppColors.textTertiary,
                          fontWeight: AppTypography.semiBold,
                        ),
                      ),
              ),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildOptionTile({
    required IconData icon,
    required String title,
    String? subtitle,
    required VoidCallback onTap,
  }) {
    return GestureDetector(
      onTap: onTap,
      child: Container(
        padding: const EdgeInsets.symmetric(vertical: 16, horizontal: 16),
        decoration: BoxDecoration(
          border: Border.all(color: AppColors.gray300),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Row(
          children: [
            Icon(icon, size: 24, color: AppColors.textPrimary),
            const SizedBox(width: 12),
            Expanded(
              child: Column(
                crossAxisAlignment: CrossAxisAlignment.start,
                children: [
                  Text(
                    title,
                    style: AppTypography.labelM.copyWith(
                      fontWeight: AppTypography.medium,
                    ),
                  ),
                  if (subtitle != null) ...[
                    const SizedBox(height: 2),
                    Text(
                      subtitle,
                      style: AppTypography.paragraphS.copyWith(
                        color: AppColors.textSecondary,
                      ),
                    ),
                  ],
                ],
              ),
            ),
            const Icon(Icons.chevron_right, color: AppColors.textSecondary),
          ],
        ),
      ),
    );
  }
}